// Declaración de variables
declarar option como entero
option = nulo

// Bucle para obtener una opción válida
mientras option no sea igual a 1 Y option no sea igual a 2:
    leer option desde la entrada del usuario
    si option es igual a 3 entonces
        salir del programa
    fin si
fin mientras

// Leer los datos de entrada
declarar datos como una lista de cadenas
si option es igual a 1 entonces
    datos = leer línea desde la entrada del usuario y dividirla por espacios
si no entonces
    datos = ["4", "5", "1", "3", "3", "2", "2", "4", "1", "4", "4", "4", "4", "1", "3", "4", "4", "3"] // Ejemplo de datos
fin si

// Convertir n y q a enteros
declarar n como entero
declarar q como entero
n = convertir a entero(datos[0])
q = convertir a entero(datos[1])

// Validar la cantidad de datos
si longitud(datos) no es igual a (2 * n + 2 * q) entonces
    mostrar "Error en la cantidad de datos ingresados"
    salir del programa
fin si

// Crear la lista de adyacencia para las aristas
declarar aristas como una lista de listas (o un array de listas) de tamaño n + 1
para cada i desde 1 hasta n:
    inicializar aristas[i] como una lista vacía
fin para

// Leer las aristas y llenar la lista de adyacencia
para i desde 2 hasta (2 * n - 1) con paso 2:
    declarar v como entero
    declarar u como entero
    v = convertir a entero(datos[i])
    u = convertir a entero(datos[i + 1])
    agregar u a la lista aristas[v]
    agregar v a la lista aristas[u]
fin para

// Inicializar los tiempos de entrada y salida
declarar time_in como un array de enteros de tamaño n + 1
declarar time_out como un array de enteros de tamaño n + 1
declarar time como entero
time = 0
declarar pila como una pila de tuplas (o registros) con tres elementos: (nodo, visitado, padre)
agregar (1, falso, -1) a la pila

// Realizar la búsqueda en profundidad (DFS)
mientras la pila no esté vacía:
    declarar elemento_pila como la tupla superior de la pila
    eliminar la tupla superior de la pila y asignarla a elemento_pila
    nodo = elemento_pila[0]
    visitado = elemento_pila[1]
    padre = elemento_pila[2]

    si no visitado entonces
        visitado = verdadero
        time_in[nodo] = time
        time = time + 1
        agregar (nodo, visitado, padre) a la pila
        para cada vecino en la lista aristas[nodo]:
            si vecino no es igual a padre entonces
                agregar (vecino, falso, nodo) a la pila
            fin si
        fin para
    si no entonces
        time_out[nodo] = time
        time = time + 1
    fin si
fin mientras

// Procesar las consultas
declarar salida como una lista de cadenas vacía
para i desde (2 * n) hasta (longitud(datos) - 1) con paso 2:
    declarar u_consulta como entero
    declarar v_consulta como entero
    u_consulta = convertir a entero(datos[i])
    v_consulta = convertir a entero(datos[i + 1])

    si (time_in[u_consulta] <= time_in[v_consulta]) Y (time_out[u_consulta] >= time_out[v_consulta]) entonces
        agregar "YES" a la lista salida
    si no entonces
        agregar "NO" a la lista salida
    fin si
fin para

// Mostrar la salida
para cada resultado en la lista salida:
    mostrar resultado
fin para